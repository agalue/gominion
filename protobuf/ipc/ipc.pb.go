// Source: https://github.com/OpenNMS/opennms/blob/master/core/ipc/grpc/common/src/main/proto/ipc.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: proto/ipc.proto

package ipc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ipc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_ipc_proto_rawDescGZIP(), []int{0}
}

type RpcRequestProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcId      string `protobuf:"bytes,1,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	RpcContent []byte `protobuf:"bytes,2,opt,name=rpc_content,json=rpcContent,proto3" json:"rpc_content,omitempty"`
	SystemId   string `protobuf:"bytes,3,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	Location   string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	ModuleId   string `protobuf:"bytes,5,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	// absolute time elapsed since the epoch in msec.
	ExpirationTime uint64            `protobuf:"varint,6,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
	TracingInfo    map[string]string `protobuf:"bytes,7,rep,name=tracing_info,json=tracingInfo,proto3" json:"tracing_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RpcRequestProto) Reset() {
	*x = RpcRequestProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ipc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcRequestProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcRequestProto) ProtoMessage() {}

func (x *RpcRequestProto) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcRequestProto.ProtoReflect.Descriptor instead.
func (*RpcRequestProto) Descriptor() ([]byte, []int) {
	return file_proto_ipc_proto_rawDescGZIP(), []int{1}
}

func (x *RpcRequestProto) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *RpcRequestProto) GetRpcContent() []byte {
	if x != nil {
		return x.RpcContent
	}
	return nil
}

func (x *RpcRequestProto) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *RpcRequestProto) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *RpcRequestProto) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *RpcRequestProto) GetExpirationTime() uint64 {
	if x != nil {
		return x.ExpirationTime
	}
	return 0
}

func (x *RpcRequestProto) GetTracingInfo() map[string]string {
	if x != nil {
		return x.TracingInfo
	}
	return nil
}

type RpcResponseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpcId       string            `protobuf:"bytes,1,opt,name=rpc_id,json=rpcId,proto3" json:"rpc_id,omitempty"`
	RpcContent  []byte            `protobuf:"bytes,2,opt,name=rpc_content,json=rpcContent,proto3" json:"rpc_content,omitempty"`
	SystemId    string            `protobuf:"bytes,3,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	Location    string            `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	ModuleId    string            `protobuf:"bytes,5,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	TracingInfo map[string]string `protobuf:"bytes,6,rep,name=tracing_info,json=tracingInfo,proto3" json:"tracing_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RpcResponseProto) Reset() {
	*x = RpcResponseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ipc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcResponseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcResponseProto) ProtoMessage() {}

func (x *RpcResponseProto) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcResponseProto.ProtoReflect.Descriptor instead.
func (*RpcResponseProto) Descriptor() ([]byte, []int) {
	return file_proto_ipc_proto_rawDescGZIP(), []int{2}
}

func (x *RpcResponseProto) GetRpcId() string {
	if x != nil {
		return x.RpcId
	}
	return ""
}

func (x *RpcResponseProto) GetRpcContent() []byte {
	if x != nil {
		return x.RpcContent
	}
	return nil
}

func (x *RpcResponseProto) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *RpcResponseProto) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *RpcResponseProto) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *RpcResponseProto) GetTracingInfo() map[string]string {
	if x != nil {
		return x.TracingInfo
	}
	return nil
}

type SinkMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageId   string            `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Content     []byte            `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	SystemId    string            `protobuf:"bytes,3,opt,name=system_id,json=systemId,proto3" json:"system_id,omitempty"`
	Location    string            `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	ModuleId    string            `protobuf:"bytes,5,opt,name=module_id,json=moduleId,proto3" json:"module_id,omitempty"`
	TracingInfo map[string]string `protobuf:"bytes,6,rep,name=tracing_info,json=tracingInfo,proto3" json:"tracing_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SinkMessage) Reset() {
	*x = SinkMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_ipc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SinkMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SinkMessage) ProtoMessage() {}

func (x *SinkMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_ipc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SinkMessage.ProtoReflect.Descriptor instead.
func (*SinkMessage) Descriptor() ([]byte, []int) {
	return file_proto_ipc_proto_rawDescGZIP(), []int{3}
}

func (x *SinkMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *SinkMessage) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *SinkMessage) GetSystemId() string {
	if x != nil {
		return x.SystemId
	}
	return ""
}

func (x *SinkMessage) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *SinkMessage) GetModuleId() string {
	if x != nil {
		return x.ModuleId
	}
	return ""
}

func (x *SinkMessage) GetTracingInfo() map[string]string {
	if x != nil {
		return x.TracingInfo
	}
	return nil
}

var File_proto_ipc_proto protoreflect.FileDescriptor

var file_proto_ipc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xce, 0x02, 0x0a, 0x0f, 0x52,
	0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15,
	0x0a, 0x06, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x72, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x70, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x52, 0x70,
	0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa7, 0x02, 0x0a, 0x10,
	0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x0a, 0x06, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x72, 0x70, 0x63, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x70, 0x63, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x70,
	0x63, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x45,
	0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9e, 0x02, 0x0a, 0x0b, 0x53, 0x69, 0x6e, 0x6b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x53, 0x69, 0x6e,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x3e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x72, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x4e, 0x4d,
	0x53, 0x49, 0x70, 0x63, 0x12, 0x39, 0x0a, 0x0c, 0x52, 0x70, 0x63, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x69, 0x6e, 0x67, 0x12, 0x11, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x53, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x12, 0x0c, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x06,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b,
	0x69, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_ipc_proto_rawDescOnce sync.Once
	file_proto_ipc_proto_rawDescData = file_proto_ipc_proto_rawDesc
)

func file_proto_ipc_proto_rawDescGZIP() []byte {
	file_proto_ipc_proto_rawDescOnce.Do(func() {
		file_proto_ipc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_ipc_proto_rawDescData)
	})
	return file_proto_ipc_proto_rawDescData
}

var file_proto_ipc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_ipc_proto_goTypes = []interface{}{
	(*Empty)(nil),            // 0: Empty
	(*RpcRequestProto)(nil),  // 1: RpcRequestProto
	(*RpcResponseProto)(nil), // 2: RpcResponseProto
	(*SinkMessage)(nil),      // 3: SinkMessage
	nil,                      // 4: RpcRequestProto.TracingInfoEntry
	nil,                      // 5: RpcResponseProto.TracingInfoEntry
	nil,                      // 6: SinkMessage.TracingInfoEntry
}
var file_proto_ipc_proto_depIdxs = []int32{
	4, // 0: RpcRequestProto.tracing_info:type_name -> RpcRequestProto.TracingInfoEntry
	5, // 1: RpcResponseProto.tracing_info:type_name -> RpcResponseProto.TracingInfoEntry
	6, // 2: SinkMessage.tracing_info:type_name -> SinkMessage.TracingInfoEntry
	2, // 3: OpenNMSIpc.RpcStreaming:input_type -> RpcResponseProto
	3, // 4: OpenNMSIpc.SinkStreaming:input_type -> SinkMessage
	1, // 5: OpenNMSIpc.RpcStreaming:output_type -> RpcRequestProto
	0, // 6: OpenNMSIpc.SinkStreaming:output_type -> Empty
	5, // [5:7] is the sub-list for method output_type
	3, // [3:5] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_ipc_proto_init() }
func file_proto_ipc_proto_init() {
	if File_proto_ipc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_ipc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ipc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcRequestProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ipc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcResponseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_ipc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SinkMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_ipc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_ipc_proto_goTypes,
		DependencyIndexes: file_proto_ipc_proto_depIdxs,
		MessageInfos:      file_proto_ipc_proto_msgTypes,
	}.Build()
	File_proto_ipc_proto = out.File
	file_proto_ipc_proto_rawDesc = nil
	file_proto_ipc_proto_goTypes = nil
	file_proto_ipc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OpenNMSIpcClient is the client API for OpenNMSIpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OpenNMSIpcClient interface {
	// Streams RPC messages between OpenNMS and Minion.
	RpcStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_RpcStreamingClient, error)
	// Streams Sink messages from Minion to OpenNMS
	SinkStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_SinkStreamingClient, error)
}

type openNMSIpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenNMSIpcClient(cc grpc.ClientConnInterface) OpenNMSIpcClient {
	return &openNMSIpcClient{cc}
}

func (c *openNMSIpcClient) RpcStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_RpcStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpenNMSIpc_serviceDesc.Streams[0], "/OpenNMSIpc/RpcStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &openNMSIpcRpcStreamingClient{stream}
	return x, nil
}

type OpenNMSIpc_RpcStreamingClient interface {
	Send(*RpcResponseProto) error
	Recv() (*RpcRequestProto, error)
	grpc.ClientStream
}

type openNMSIpcRpcStreamingClient struct {
	grpc.ClientStream
}

func (x *openNMSIpcRpcStreamingClient) Send(m *RpcResponseProto) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openNMSIpcRpcStreamingClient) Recv() (*RpcRequestProto, error) {
	m := new(RpcRequestProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openNMSIpcClient) SinkStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_SinkStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OpenNMSIpc_serviceDesc.Streams[1], "/OpenNMSIpc/SinkStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &openNMSIpcSinkStreamingClient{stream}
	return x, nil
}

type OpenNMSIpc_SinkStreamingClient interface {
	Send(*SinkMessage) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type openNMSIpcSinkStreamingClient struct {
	grpc.ClientStream
}

func (x *openNMSIpcSinkStreamingClient) Send(m *SinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openNMSIpcSinkStreamingClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenNMSIpcServer is the server API for OpenNMSIpc service.
type OpenNMSIpcServer interface {
	// Streams RPC messages between OpenNMS and Minion.
	RpcStreaming(OpenNMSIpc_RpcStreamingServer) error
	// Streams Sink messages from Minion to OpenNMS
	SinkStreaming(OpenNMSIpc_SinkStreamingServer) error
}

// UnimplementedOpenNMSIpcServer can be embedded to have forward compatible implementations.
type UnimplementedOpenNMSIpcServer struct {
}

func (*UnimplementedOpenNMSIpcServer) RpcStreaming(OpenNMSIpc_RpcStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method RpcStreaming not implemented")
}
func (*UnimplementedOpenNMSIpcServer) SinkStreaming(OpenNMSIpc_SinkStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SinkStreaming not implemented")
}

func RegisterOpenNMSIpcServer(s *grpc.Server, srv OpenNMSIpcServer) {
	s.RegisterService(&_OpenNMSIpc_serviceDesc, srv)
}

func _OpenNMSIpc_RpcStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenNMSIpcServer).RpcStreaming(&openNMSIpcRpcStreamingServer{stream})
}

type OpenNMSIpc_RpcStreamingServer interface {
	Send(*RpcRequestProto) error
	Recv() (*RpcResponseProto, error)
	grpc.ServerStream
}

type openNMSIpcRpcStreamingServer struct {
	grpc.ServerStream
}

func (x *openNMSIpcRpcStreamingServer) Send(m *RpcRequestProto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openNMSIpcRpcStreamingServer) Recv() (*RpcResponseProto, error) {
	m := new(RpcResponseProto)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OpenNMSIpc_SinkStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenNMSIpcServer).SinkStreaming(&openNMSIpcSinkStreamingServer{stream})
}

type OpenNMSIpc_SinkStreamingServer interface {
	SendAndClose(*Empty) error
	Recv() (*SinkMessage, error)
	grpc.ServerStream
}

type openNMSIpcSinkStreamingServer struct {
	grpc.ServerStream
}

func (x *openNMSIpcSinkStreamingServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openNMSIpcSinkStreamingServer) Recv() (*SinkMessage, error) {
	m := new(SinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _OpenNMSIpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OpenNMSIpc",
	HandlerType: (*OpenNMSIpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RpcStreaming",
			Handler:       _OpenNMSIpc_RpcStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SinkStreaming",
			Handler:       _OpenNMSIpc_SinkStreaming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ipc.proto",
}
