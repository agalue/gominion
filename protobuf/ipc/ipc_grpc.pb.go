// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ipc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenNMSIpcClient is the client API for OpenNMSIpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenNMSIpcClient interface {
	// Streams RPC messages between OpenNMS and Minion.
	RpcStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_RpcStreamingClient, error)
	// Streams Sink messages from Minion to OpenNMS
	SinkStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_SinkStreamingClient, error)
}

type openNMSIpcClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenNMSIpcClient(cc grpc.ClientConnInterface) OpenNMSIpcClient {
	return &openNMSIpcClient{cc}
}

func (c *openNMSIpcClient) RpcStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_RpcStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenNMSIpc_ServiceDesc.Streams[0], "/OpenNMSIpc/RpcStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &openNMSIpcRpcStreamingClient{stream}
	return x, nil
}

type OpenNMSIpc_RpcStreamingClient interface {
	Send(*RpcResponseProto) error
	Recv() (*RpcRequestProto, error)
	grpc.ClientStream
}

type openNMSIpcRpcStreamingClient struct {
	grpc.ClientStream
}

func (x *openNMSIpcRpcStreamingClient) Send(m *RpcResponseProto) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openNMSIpcRpcStreamingClient) Recv() (*RpcRequestProto, error) {
	m := new(RpcRequestProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *openNMSIpcClient) SinkStreaming(ctx context.Context, opts ...grpc.CallOption) (OpenNMSIpc_SinkStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &OpenNMSIpc_ServiceDesc.Streams[1], "/OpenNMSIpc/SinkStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &openNMSIpcSinkStreamingClient{stream}
	return x, nil
}

type OpenNMSIpc_SinkStreamingClient interface {
	Send(*SinkMessage) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type openNMSIpcSinkStreamingClient struct {
	grpc.ClientStream
}

func (x *openNMSIpcSinkStreamingClient) Send(m *SinkMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *openNMSIpcSinkStreamingClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenNMSIpcServer is the server API for OpenNMSIpc service.
// All implementations must embed UnimplementedOpenNMSIpcServer
// for forward compatibility
type OpenNMSIpcServer interface {
	// Streams RPC messages between OpenNMS and Minion.
	RpcStreaming(OpenNMSIpc_RpcStreamingServer) error
	// Streams Sink messages from Minion to OpenNMS
	SinkStreaming(OpenNMSIpc_SinkStreamingServer) error
	mustEmbedUnimplementedOpenNMSIpcServer()
}

// UnimplementedOpenNMSIpcServer must be embedded to have forward compatible implementations.
type UnimplementedOpenNMSIpcServer struct {
}

func (UnimplementedOpenNMSIpcServer) RpcStreaming(OpenNMSIpc_RpcStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method RpcStreaming not implemented")
}
func (UnimplementedOpenNMSIpcServer) SinkStreaming(OpenNMSIpc_SinkStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method SinkStreaming not implemented")
}
func (UnimplementedOpenNMSIpcServer) mustEmbedUnimplementedOpenNMSIpcServer() {}

// UnsafeOpenNMSIpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenNMSIpcServer will
// result in compilation errors.
type UnsafeOpenNMSIpcServer interface {
	mustEmbedUnimplementedOpenNMSIpcServer()
}

func RegisterOpenNMSIpcServer(s grpc.ServiceRegistrar, srv OpenNMSIpcServer) {
	s.RegisterService(&OpenNMSIpc_ServiceDesc, srv)
}

func _OpenNMSIpc_RpcStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenNMSIpcServer).RpcStreaming(&openNMSIpcRpcStreamingServer{stream})
}

type OpenNMSIpc_RpcStreamingServer interface {
	Send(*RpcRequestProto) error
	Recv() (*RpcResponseProto, error)
	grpc.ServerStream
}

type openNMSIpcRpcStreamingServer struct {
	grpc.ServerStream
}

func (x *openNMSIpcRpcStreamingServer) Send(m *RpcRequestProto) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openNMSIpcRpcStreamingServer) Recv() (*RpcResponseProto, error) {
	m := new(RpcResponseProto)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OpenNMSIpc_SinkStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OpenNMSIpcServer).SinkStreaming(&openNMSIpcSinkStreamingServer{stream})
}

type OpenNMSIpc_SinkStreamingServer interface {
	SendAndClose(*Empty) error
	Recv() (*SinkMessage, error)
	grpc.ServerStream
}

type openNMSIpcSinkStreamingServer struct {
	grpc.ServerStream
}

func (x *openNMSIpcSinkStreamingServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *openNMSIpcSinkStreamingServer) Recv() (*SinkMessage, error) {
	m := new(SinkMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OpenNMSIpc_ServiceDesc is the grpc.ServiceDesc for OpenNMSIpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenNMSIpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OpenNMSIpc",
	HandlerType: (*OpenNMSIpcServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RpcStreaming",
			Handler:       _OpenNMSIpc_RpcStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SinkStreaming",
			Handler:       _OpenNMSIpc_SinkStreaming_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "ipc.proto",
}
