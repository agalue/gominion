---

volumes:

  zookeeper:
  kafka:
  postgres:

services:

  zookeeper:
    image: zookeeper:3.5
    container_name: zookeeper
    hostname: zookeeper
    ports:
    - 8080:8080
    volumes:
    - zookeeper:/data
    environment:
    - TZ=America/New_York
    - ZOO_MY_ID=1
    - ZOO_SERVERS=server.1=zookeeper:2888:3888;2181
    - ZOO_STANDALONE_ENABLED=true
    - ZOO_4LW_COMMANDS_WHITELIST=*
    healthcheck:
      test: echo stat | nc zookeeper 2181
      interval: 30s
      timeout: 5s
      retries: 3

  kafka:
    image: bitnami/kafka:2.8.1
    container_name: kafka
    hostname: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
    - 9094:9094
    volumes:
    - kafka:/kafka
    environment:
    - TZ=America/New_York
    - ALLOW_PLAINTEXT_LISTENER=yes
    - KAFKA_CFG_BROKER_ID=1
    - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://:9092,EXTERNAL://${EXTERNAL_IP:-192.168.0.40}:9094
    - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9094
    - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
    - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181/kafka
    - KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS=60000
    - KAFKA_CFG_NUM_PARTITIONS=4
    - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
    - KAFKA_CFG_MIN_INSYNC_REPLICAS=1
    - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    - KAFKA_CFG_DELETE_TOPIC_ENABLE=true
    - KAFKA_CFG_CONTROLLED_SHUTDOWN_ENABLE=true
    - KAFKA_HEAP_OPTS=-Xmx${KAFKA_HEAP:-2g} -Xms${KAFKA_HEAP:-2g} -Dcom.sun.management.jmxremote.rmi.port=9999 -Djava.rmi.server.hostname=kafka
    - JMX_PORT=9999
    healthcheck:
      test: JMX_PORT= kafka-topics.sh --list --bootstrap-server kafka:9092
      interval: 30s
      timeout: 5s
      retries: 3

  manager:
    image: hlebalbau/kafka-manager:stable
    container_name: manager
    hostname: manager
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
    - 9000:9000
    environment:
    - TZ=America/New_York
    - ZK_HOSTS=zookeeper:2181
    healthcheck:
      test: wget --quiet --tries=1 --spider http://localhost:9000 || exit 1
      interval: 1m
      timeout: 5s
      retries: 3

  database:
    image: postgres:12
    container_name: database
    hostname: database
    volumes:
    - postgres:/var/lib/postgresql/data
    ports:
    - 5432:5432
    environment:
    - TZ=America/New_York
    - POSTGRES_HOST=database
    - POSTGRES_PORT=5432
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 5s
      retries: 3

  opennms:
    image: opennms/horizon:28.1.1
    container_name: opennms
    hostname: opennms
    depends_on:
      kafka:
        condition: service_healthy
      database:
        condition: service_healthy
    command: [ -s ]
    ports:
    - 8980:8980
    - 8101:8101
    volumes:
    - ./opennms-etc:/opt/opennms-etc-overlay
    environment:
    - TZ=America/New_York
    - POSTGRES_HOST=database
    - POSTGRES_PORT=5432
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - JAVA_OPTS=-Xms${OPENNMS_HEAP:-4g} -Xmx${OPENNMS_HEAP:-4g} -XX:+AlwaysPreTouch -XX:+UseStringDeduplication
    healthcheck:
      test: curl -f -I http://localhost:8980/opennms/login.jsp
      interval: 1m
      timeout: 5s
      retries: 3

  grpc-server:
    image: agalue/onms-grpc-server
    container_name: grpc-server
    hostname: grpc-server
    depends_on:
      kafka:
        condition: service_healthy
    ports:
    - 8990:8990
    - 2112:2112
    environment:
    - TZ=America/New_York
    - BOOTSTRAP_SERVER=kafka:9092
    - PORT=8990
    - HTTP_PORT=2112
    - TLS_ENABLED=false
    - CONSUMER_GROUP_ID=GRPC

  sink-trap:
    image: agalue/onms-kafka-ipc-receiver
    container_name: sink-trap
    hostname: sink-trap
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - IPC=sink
    - TOPIC=OpenNMS.Sink.Trap
    - PARSER=snmp

  sink-syslog:
    image: agalue/onms-kafka-ipc-receiver
    container_name: sink-syslog
    hostname: sink-syslog
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - IPC=sink
    - TOPIC=OpenNMS.Sink.Syslog
    - PARSER=syslog

  sink-netflow5:
    image: agalue/onms-kafka-ipc-receiver
    container_name: sink-netflow5
    hostname: sink-netflow5
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - TOPIC=OpenNMS.Sink.Telemetry-Netflow-5
    - IPC=sink
    - PARSER=netflow

  sink-netflow9:
    image: agalue/onms-kafka-ipc-receiver
    container_name: sink-netflow9
    hostname: sink-netflow9
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - TOPIC=OpenNMS.Sink.Telemetry-Netflow-9
    - IPC=sink
    - PARSER=netflow

  rpc-request-miami:
    image: agalue/onms-kafka-ipc-receiver
    container_name: rpc-request-newyork
    hostname: rpc-request-newyork
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - TOPIC=OpenNMS.Miami.rpc-request
    - IPC=rpc

  rpc-request-boston:
    image: agalue/onms-kafka-ipc-receiver
    container_name: rpc-request-boston
    hostname: rpc-request-boston
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - TOPIC=OpenNMS.Boston.rpc-request
    - IPC=rpc

  rpc-request-apex:
    image: agalue/onms-kafka-ipc-receiver
    container_name: rpc-request-apex
    hostname: rpc-request-apex
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - TOPIC=OpenNMS.Apex.rpc-request
    - IPC=rpc

  rpc-response:
    image: agalue/onms-kafka-ipc-receiver
    container_name: rpc-response
    hostname: rpc-response
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    environment:
    - BOOTSTRAP_SERVER=kafka:9092
    - KAFKA_ACKS=1
    - TOPIC=OpenNMS.rpc-response
    - IPC=rpc

  gominion-kafka:
    build: ../
    image: agalue/gominion
    container_name: gominion-kafka
    hostname: gominion-kafka
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    command:
    - -c
    - /gominion.yaml
    ports:
    - 18877:8877/udp
    - 14729:4729/udp
    - 11162:1162/udp
    - 11514:1514/udp
    volumes:
    - ./gominion-cfg/kafka.yaml:/gominion.yaml

  gominion-grpc:
    build: ../
    image: agalue/gominion
    container_name: gominion-grpc
    hostname: gominion-grpc
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    command:
    - -c
    - /gominion.yaml
    ports:
    - 28877:8877/udp
    - 24729:4729/udp
    - 21162:1162/udp
    - 21514:1514/udp
    volumes:
    - ./gominion-cfg/grpc.yaml:/gominion.yaml

  minion:
    image: opennms/minion:28.1.1
    container_name: minion
    hostname: minion
    depends_on:
      kafka:
        condition: service_healthy
      opennms:
        condition: service_healthy
    command: [ -c ]
    ports:
    - 8201:8201
    - 38877:8877/udp
    - 34729:4729/udp
    - 31162:1162/udp
    - 31514:1514/udp
    volumes:
    - ./minion-etc:/opt/minion-etc-overlay
    environment:
    - TZ=America/New_York
    - OPENNMS_HTTP_USER=admin
    - OPENNMS_HTTP_PASS=admin
    - MINION_ID=minion-java
    - MINION_LOCATION=Apex
    - OPENNMS_HTTP_URL=http://opennms:8980/opennms
    healthcheck:
      test: /health.sh
      interval: 1m
      timeout: 5s
      retries: 3
